package com.banas.tools.pitestReportCombiner;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;

public class ReportConcat {

    private static final Logger LOGGER = Logger.getLogger(ReportConcat.class);
    private static final String DEFAULT_CODING_OF_HTML_FILES = "UTF-8";
    private FileUtils fileUtils = new FileUtils();
    private ReportConcatParameters reportConcatParameters;

    public ReportConcat(ReportConcatParameters reportConcatParameters) {
        this.reportConcatParameters = reportConcatParameters;
    }

    public void run() {
        LOGGER.info(
            "Running program with parameters: rootProjectDirectory="
                + reportConcatParameters.getRootProjectDirectoryPath()
                + " ,reportConcatDirectory=" + reportConcatParameters.getReportConcatDirectoryPath()
                + " ,pitReportDirectory=" + reportConcatParameters.getPitReportDirectoryName());
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(
                new File(reportConcatParameters.getReportConcatDirectoryPath()));
            File root = new File(reportConcatParameters.getRootProjectDirectoryPath());
            List<File> reports = fileUtils.findDirectories(root, reportConcatParameters.getPitReportDirectoryName());
            File reportConcatDirectory = new File(reportConcatParameters.getReportConcatDirectoryPath());
            if (!reportConcatDirectory.exists()) {
                Files.createDirectory(reportConcatDirectory.toPath());
            }
            for (File report : reports) {
                fileUtils.copyDirectoryAndRenameIndexHtml(report, reportConcatDirectory,
                    reportConcatParameters.getPitReportDirectoryName());
            }

            concatHTMLFiles();
        } catch (IOException e) {
            LOGGER.error("", e);
        }
    }

    private void concatHTMLFiles() throws IOException {
        LOGGER.info("Concatenating html files");
        File reportConcatDirectory = new File(reportConcatParameters.getReportConcatDirectoryPath());
        File[] htmlFiles = reportConcatDirectory.listFiles(file -> file.getName().endsWith(".html"));
        File newIndexHtmlFile = createNewIndexFile();
        List<Element> elementList = retrieveElementsFromHtmlFiles(htmlFiles);
        Document docRoot = createDocument(htmlFiles, elementList);
        org.apache.commons.io.FileUtils.writeStringToFile(newIndexHtmlFile, docRoot.outerHtml(),
            DEFAULT_CODING_OF_HTML_FILES);

        LOGGER.info("Concatenation finished.");
    }

    private List<Element> retrieveElementsFromHtmlFiles(File[] htmlFiles) throws IOException {
        List<Elements> elementsList = new ArrayList<>();
        for (File file : htmlFiles) {
            Document docRoot = Jsoup.parse(file, DEFAULT_CODING_OF_HTML_FILES, "");
            Elements bodyChildren = docRoot.select("body").get(0).children();
            //Remove Pit Test Coverage Report header
            bodyChildren.remove(0);
            //Removing Report generated by element
            bodyChildren.remove(bodyChildren.size() - 1);
            //Add module name header
            Element moduleNameHeader = new Element(Tag.valueOf("h1"), "");
            String moduleName = file.getName().substring(0, file.getName().indexOf(".html"));
            moduleNameHeader.html(moduleName);
            bodyChildren.add(0, moduleNameHeader);
            elementsList.add(bodyChildren);
        }
        List<Element> elementList = new ArrayList<>();
        for (Elements elements : elementsList) {
            for (Element element : elements) {
                elementList.add(element);
            }
        }
        return elementList;
    }

    private File createNewIndexFile() throws IOException {
        File newIndexHtmlFile =
            new File(reportConcatParameters.getReportConcatDirectoryPath() + File.separator + "index.html");
        if (!newIndexHtmlFile.exists()) {
            newIndexHtmlFile.createNewFile();
        }
        return newIndexHtmlFile;
    }

    private Document createDocument(File[] htmlFiles, List<Element> elementList) throws IOException {
        File lastHtmlFile = htmlFiles[htmlFiles.length - 1];
        Document document = Jsoup.parse(lastHtmlFile, DEFAULT_CODING_OF_HTML_FILES, "");
        document.select("body").empty();
        for (Element element : elementList) {
            document.select("body").append(element.outerHtml());
        }

        return document;
    }
}